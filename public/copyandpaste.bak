// import { checkedList } from "../api/checkedList.js";

export async function displayCheckbox(result) {
  const resultContainer = document.getElementById("result-container");

  // Log the raw API response
  console.log("API Response:", result);

  // Check if the result is defined
  if (!result) {
    console.error("Error: API response is undefined");
    return;
  }

  // Parse the JSON-formatted string
  const jsonData = JSON.parse(result.parts[0].text.replace(/'/g, '"'));

  // // Ensure property names and string values are enclosed in double quotes
    // const fixedJsonString = result.parts[0].text
    //   .replace(/'([^']+)'(?=:)/g, '"$1"') // Replace single quotes in property names
    //   .replace(/'([^']+)'/g, '"$1"'); // Replace single quotes in string values

  // Log the parsed JSON data
  console.log("Parsed JSON Data:", jsonData);

  // Display the structured content with checkbox icons and input boxes
  resultContainer.innerHTML = `
  <div>
    <h1>Checklist</h1>
    <div>
      <h2>Objects</h2>
      <ul class="item-list" id="objectList">
        ${Object.keys(jsonData.checklist.objects)
          .map(
            (object, index) => `
              <li>
                ${index + 1}. 
                <span>${object}</span>
                <input type="checkbox" ${
                  jsonData.checklist.objects[object] ? "checked" : ""
                }/>
              </li>
            `
          )
          .join("")}
        <li>
          <input type="text" class="new-input" id="newObjectInput" placeholder="Add new object" />
          <button onclick="addNewItem('objectList', 'newObjectInput')">Add</button>
        </li>
      </ul>
    </div>
    <div>
      <h2>Actions</h2>
      <ul class="item-list" id="actionList">
        ${Object.keys(jsonData.checklist.actions)
          .map(
            (action, index) => `
              <li>
                ${index + 1}. 
                <span>${action}</span>
                <input type="checkbox" ${
                  jsonData.checklist.actions[action] ? "checked" : ""
                }/>
              </li>
            `
          )
          .join("")}
        <li>
          <input type="text" class="new-input" id="newActionInput" placeholder="Add new action" />
          <button onclick="addNewItem('actionList', 'newActionInput')">Add</button>
        </li>
      </ul>
    </div>
  </div>
`;

  // Define functions to add new items
  window.addNewItem = (listId, inputId) => {
    const newItemInput = document.getElementById(inputId);
    const itemList = document.getElementById(listId);

    const newItem = newItemInput.value.toLowerCase(); // Convert to lowercase for case-insensitive comparison

    // Check if the item is already in the list
    if (
      Object.keys(
        jsonData.checklist[listId === "objectList" ? "objects" : "actions"]
      ).some((item) => item.toLowerCase() === newItem)
    ) {
      alert("The item is already added!");
      return;
    }

    // Add new item to the list
    itemList.innerHTML += `
      <li>
        ${
          Object.keys(
            jsonData.checklist[listId === "objectList" ? "objects" : "actions"]
          ).length + 1
        }. 
        <span>${newItemInput.value}</span>
        <input type="checkbox" ${
          jsonData.checklist[listId === "objectList" ? "objects" : "actions"][
            newItem
          ]
            ? "checked"
            : ""
        }/>
      </li>
    `;
  };

  window.submitChecklist = async () => {
    const newObjectInput = document.getElementById("newObjectInput");
    const newActionInput = document.getElementById("newActionInput");

    const newItemObject = newObjectInput.value.toLowerCase(); // Convert to lowercase for case-insensitive comparison
    const newItemAction = newActionInput.value.toLowerCase(); // Convert to lowercase for case-insensitive comparison

    // Check if the items are already in the list
    if (
      Object.keys(jsonData.checklist.objects).some(
        (object) => object.toLowerCase() === newItemObject
      ) ||
      Object.keys(jsonData.checklist.actions).some(
        (action) => action.toLowerCase() === newItemAction
      )
    ) {
      alert("The item is already added!");
      return;
    }

    // Add new items to the checklist
    jsonData.checklist.objects[newItemObject] = true;
    jsonData.checklist.actions[newItemAction] = true;

    // Call the checkedList function with the updated state
    const result = await checkedList(jsonData);

    // Display the result
    alert(result);
    console.log(result);
    return result;
  };
}

// Send jsonData to the server using fetch or another method
          const checkedListResponse = await fetch("/api/checkedList", {
            method: "POST",
            headers: {
              // "Content-Type": "application/json",
              // No need to set Content-Type, as it will be set automatically by FormData
              // when sending FormData, you should set the "Content-Type" header to "multipart/form-data" instead of "application/json". FormData is used for sending binary data, including files, and it uses a different content type.
              // By omitting the "Content-Type" header, the browser will automatically set it to "multipart/form-data" when FormData is used in the body. This is the appropriate content type for sending a mixture of text and binary data, such as when uploading files.
            },
            // body: JSON.stringify({ jsonData }),
            body: formData,
          });
